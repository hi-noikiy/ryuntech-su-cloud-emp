<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ryuntech.saas.api.mapper.EmployeeMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.ryuntech.saas.api.model.Employee">
        <id column="EMPLOYEE_ID" property="employeeId"/>
        <result column="SYS_USER_ID" property="sysUserId"/>
        <result column="NAME" property="name"/>
        <result column="COMPANY_ID" property="companyId"/>
        <result column="DEPARTMENT_ID" property="departmentId"/>
        <result column="DEPARTMENT_NAME" property="departmentName"/>
        <result column="MOBILE" property="mobile"/>
        <result column="EMAIL" property="email"/>
        <result column="STATUS" property="status"/>
        <result column="COMPANY_NAME" property="companyName"/>
        <result column="UPDATED_AT" property="updatedAt"/>
        <result column="CREATED_AT" property="createdAt"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
         EMPLOYEE_ID, SYS_USER_ID, NAME, COMPANY_ID, DEPARTMENT_ID, DEPARTMENT_NAME, MOBILE, EMAIL, STATUS, COMPANY_NAME, UPDATED_AT, CREATED_AT
    </sql>
    <update id="migrateToAnotherDept">
        update ryn_employee
        set DEPARTMENT_ID = #{newDeptId},
            UPDATED_AT = SYSDATE()
        where DEPARTMENT_ID = #{oldDeptId}
    </update>

    <select id="selectCompanys" parameterType="String" resultType="map">
        select rynem.company_name, sysro.rval, sysrope.perm_val
        from ryn_employee rynem
        left join sys_user_role rynemro
        on rynem.employee_id = rynemro.employee_id
        left join sys_role sysro
        on rynemro.role_id = sysro.rid
        left join sys_role_perm sysrope
        on rynemro.role_id = sysrope.role_id
        where rynem.sys_user_id = #{sysUserId, jdbcType=VARCHAR}
    </select>

    <select id="queryEmployeeIds" resultType="java.lang.String" parameterType="java.util.List">
        select employee_id
        from ryn_employee
        where department_id in
        <foreach collection="departmentIdList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="queryListByLimitSearch" resultMap="BaseResultMap" resultType="com.ryuntech.saas.api.model.Employee">
        select * from ryn_employee
        <where>
            <if test="name != null and name != ''">
                and contract_name like concat('%',#{name},'%')
            </if>
            <if test="employeeIdList != null and employeeIdList.size()>0">
                and employee_id in
                <foreach collection="employeeIdList" item="status" index="index" open="(" close=")" separator=",">
                    #{status}
                </foreach>
            </if>

        </where>
    </select>

    <select id="queryRoleLimitEmployeeIds" resultType="java.util.Map" parameterType="java.util.List">
        select rer.employee_id, sr.rname
        from sys_user_role rer
        left join sys_role sr
        on rer.role_id = sr.rid
        <where>
            <if test="employeeIdList != null and employeeIdList.size()>0">
                rer.employee_id in
                <foreach collection="employeeIdList" item="status" index="index" open="(" close=")" separator=",">
                    #{status}
                </foreach>
            </if>

        </where>
    </select>

    <select id="getPager" parameterType="com.ryuntech.saas.api.form.EmployeeForm" resultType="com.ryuntech.saas.api.dto.EmployeeDTO">
        SELECT
          re.`EMPLOYEE_ID` employeeId,
          re.`NAME` name,
          t.`concatRoleName`,
          rd.`DEPARTMENT_NAME` departmentName,
          su.`MOBILE` mobile,
          re.`DATA_TYPE` dataType,
          re.`STATUS` status
        FROM
          `ryn_department` rd ,
          `sys_user` su,
          `ryn_employee` re
          LEFT JOIN
          (SELECT
          s1.`EMPLOYEE_ID`,
          CONCAT(s2.`RNAME`, ',') concatRoleName
        FROM
          `sys_user_role` s1,
          `sys_role` s2
        WHERE s1.`ROLE_ID` = s1.`ROLE_ID`
        GROUP BY s1.`EMPLOYEE_ID`) t ON re.`EMPLOYEE_ID` = t.`EMPLOYEE_ID`
        <where>
            re.`DEPARTMENT_ID` = rd.`DEPARTMENT_ID` AND su.`SYS_USER_ID` = re.`SYS_USER_ID` AND su.`STATUS` = 1 AND re.`COMPANY_ID` = #{companyId}

            <if test="departmentId != null and departmentId  != ''">
                AND re.`DEPARTMENT_ID` = #{departmentId}
            </if>

            <if test="status != null and status  != ''">
                AND re.`STATUS` = #{status}
            </if>

            <if test="keyWord != null and keyWord  != ''">
                AND (instr(re.`NAME`,#{keyWord})!=0 OR instr(su.`MOBILE`,#{keyWord})!=0)
            </if>

        </where>
    </select>

    <select id="detail" resultType="com.ryuntech.saas.api.dto.EmployeeDetailDTO">
        SELECT
            re.`EMPLOYEE_ID` employeeId,
            su.`MOBILE` mobile,
            re.`NAME` name,
            rd.`DEPARTMENT_ID` departmentId,
            re.`IS_CHARGER` isCharger,
            re.`EMAIL` email,
            re.`DATA_TYPE` dataType,
            t.`roleIds`
        FROM
          `ryn_department` rd ,
          `sys_user` su,
          `ryn_employee` re
          LEFT JOIN
          (SELECT
          s1.`EMPLOYEE_ID`,
          CONCAT(s2.`RID`, ',') roleIds
        FROM
          `sys_user_role` s1,
          `sys_role` s2
        WHERE s1.`ROLE_ID` = s1.`ROLE_ID`
        GROUP BY s1.`EMPLOYEE_ID`) t ON re.`EMPLOYEE_ID` = t.`EMPLOYEE_ID`
        <where>
            re.`DEPARTMENT_ID` = rd.`DEPARTMENT_ID` AND su.`SYS_USER_ID` = re.`SYS_USER_ID` AND su.`STATUS` = 1
            AND re.`EMPLOYEE_ID` = #{employeeId}
        </where>
    </select>

</mapper>
